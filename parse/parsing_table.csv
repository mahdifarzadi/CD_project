 	$	int	void	(	;	[	ID	,	{	break	if	while	return	switch	+	-	NUM	case	default	=	*	<	==	}	)	else	]	:	output
Program	Declaration-list $	Declaration-list $	Declaration-list $																											
Declaration-list	ε	Declaration Declaration-list	Declaration Declaration-list	ε	ε		ε		ε	ε	ε	ε	ε	ε	ε	ε	ε							ε						
Declaration	synch	Declaration-initial Declaration-prime	Declaration-initial Declaration-prime	synch	synch		synch		synch	synch	synch	synch	synch	synch	synch	synch	synch							synch						
Declaration-initial		#ptype Type-specifier #pvar ID	#ptype Type-specifier #pvar ID	synch	synch	synch		synch																	synch					
Declaration-prime	synch	synch	synch	Fun-declaration-prime	Var-declaration-prime	Var-declaration-prime	synch		synch	synch	synch	synch	synch	synch	synch	synch	synch							synch						
Var-declaration-prime	synch	synch	synch	synch	#var_dec ;	[ #pnum NUM ] #init_arr ;	synch		synch	synch	synch	synch	synch	synch	synch	synch	synch							synch						
Fun-declaration-prime	synch	synch	synch	#func_dec ( Params ) #add_params Compound-stmt #func_end	synch		synch		synch	synch	synch	synch	synch	synch	synch	synch	synch							synch						
Type-specifier		int	void				synch																							
Params		#ptype int #pvar ID Param-prime #add_param Param-list	void Param-list-void-abtar																						synch					
Param-list-void-abtar							ID Param-prime Param-list																		ε					
Param-list								, Param Param-list																	ε					
Param		Declaration-initial Param-prime #add_param	Declaration-initial Param-prime #add_param					synch																	synch					
Param-prime						[ ]		ε																	ε					
Compound-stmt	synch	synch	synch	synch	synch		synch		{ Declaration-list Statement-list }	synch	synch	synch	synch	synch	synch	synch	synch	synch	synch					synch		synch				
Statement-list				Statement Statement-list	Statement Statement-list		Statement Statement-list		Statement Statement-list	Statement Statement-list	Statement Statement-list	Statement Statement-list	Statement Statement-list	Statement Statement-list	Statement Statement-list	Statement Statement-list	Statement Statement-list	ε	ε					ε						
Statement				Expression-stmt	Expression-stmt		Expression-stmt		Compound-stmt	Expression-stmt	Selection-stmt	Iteration-stmt	Return-stmt	Switch-stmt	Expression-stmt	Expression-stmt	Expression-stmt	synch	synch					synch		synch				
Expression-stmt				Expression ; #pop	;		Expression ; #pop		synch	break #jp_break ;	synch	synch	synch	synch	Expression ; #pop	Expression ; #pop	Expression ; #pop	synch	synch					synch		synch				
Selection-stmt				synch	synch		synch		synch	synch	if ( Expression ) #save Statement else #jpf_save Statement #jp	synch	synch	synch	synch	synch	synch	synch	synch					synch		synch				
Iteration-stmt				synch	synch		synch		synch	synch	synch	while ( #label Expression ) #save Statement #while	synch	synch	synch	synch	synch	synch	synch					synch		synch				
Return-stmt				synch	synch		synch		synch	synch	synch	synch	return Return-stmt-prime	synch	synch	synch	synch	synch	synch					synch		synch				
Return-stmt-prime				Expression ;	;		Expression ;		synch	synch	synch	synch	synch	synch	Expression ;	Expression ;	Expression ;	synch	synch					synch		synch				
Switch-stmt				synch	synch		synch		synch	synch	synch	synch	synch	switch #tmp_save ( Expression ) { Case-stmts Default-stmt } #jp_switch	synch	synch	synch	synch	synch					synch		synch				
Case-stmts																		Case-stmt Case-stmts	ε					ε						
Case-stmt																		case #pnum NUM : #cmp_save Statement-list #jpf_switch	synch					synch						
Default-stmt																			default : Statement-list					ε						
Expression				Simple-expression-zegond	synch		#pid ID B	synch							Simple-expression-zegond	Simple-expression-zegond	Simple-expression-zegond								synch		synch			
B				Simple-expression-prime	Simple-expression-prime	[ Expression ] #access_arr H		Simple-expression-prime							Simple-expression-prime	Simple-expression-prime				= Expression #assign	Simple-expression-prime	Simple-expression-prime	Simple-expression-prime		Simple-expression-prime		Simple-expression-prime			
H					G D C			G D C							G D C	G D C				= Expression #assign	G D C	G D C	G D C		G D C		G D C			
Simple-expression-zegond				Additive-expression-zegond C	synch			synch							Additive-expression-zegond C	Additive-expression-zegond C	Additive-expression-zegond C								synch		synch			
Simple-expression-prime				Additive-expression-prime C	Additive-expression-prime C			Additive-expression-prime C							Additive-expression-prime C	Additive-expression-prime C					Additive-expression-prime C	Additive-expression-prime C	Additive-expression-prime C		Additive-expression-prime C		Additive-expression-prime C			
C					ε			ε														Relop Additive-expression #if	Relop Additive-expression #if		ε		ε			
Relop				synch			synch								synch	synch	synch					#if_s <	#if_s ==							
Additive-expression				Term D	synch		Term D	synch							Term D	Term D	Term D								synch		synch			
Additive-expression-prime				Term-prime D	Term-prime D			Term-prime D							Term-prime D	Term-prime D					Term-prime D	Term-prime D	Term-prime D		Term-prime D		Term-prime D			
Additive-expression-zegond				Term-zegond D	synch			synch							Term-zegond D	Term-zegond D	Term-zegond D					synch	synch		synch		synch			
D					ε			ε							Addop Term #sum D	Addop Term #sum D						ε	ε		ε		ε			
Addop				synch			synch								#sign +	#sign -	synch													
Term				Signed-factor G	synch		Signed-factor G	synch							Signed-factor G	Signed-factor G	Signed-factor G					synch	synch		synch		synch			
Term-prime				Signed-factor-prime G	Signed-factor-prime G			Signed-factor-prime G							Signed-factor-prime G	Signed-factor-prime G					Signed-factor-prime G	Signed-factor-prime G	Signed-factor-prime G		Signed-factor-prime G		Signed-factor-prime G			
Term-zegond				Signed-factor-zegond G	synch			synch							Signed-factor-zegond G	Signed-factor-zegond G	Signed-factor-zegond G					synch	synch		synch		synch			
G					ε			ε							ε	ε					* Signed-factor #multi G	ε	ε		ε		ε			
Signed-factor				Factor	synch		Factor	synch							#sign + Factor #s_num	#sign - Factor #s_num	Factor				synch	synch	synch		synch		synch			
Signed-factor-prime				Factor-prime	Factor-prime			Factor-prime							Factor-prime	Factor-prime					Factor-prime	Factor-prime	Factor-prime		Factor-prime		Factor-prime			
Signed-factor-zegond				Factor-zegond	synch			synch							#sign + Factor #s_num	#sign - Factor #s_num	Factor-zegond				synch	synch	synch		synch		synch			
Factor				( Expression )	synch		#pid ID Var-call-prime	synch							synch	synch	#pnum NUM				synch	synch	synch		synch		synch			
Var-call-prime				#func_call ( Args ) #get_args	Var-prime	Var-prime		Var-prime							Var-prime	Var-prime					Var-prime	Var-prime	Var-prime		Var-prime		Var-prime			
Var-prime					ε	[ Expression ] #access_arr		ε							ε	ε					ε	ε	ε		ε		ε			
Factor-prime				#func_call ( Args ) #get_args	ε			ε							ε	ε					ε	ε	ε		ε		ε			
Factor-zegond				( Expression )	synch			synch							synch	synch	#pnum NUM				synch	synch	synch		synch		synch			
Args				Arg-list			Arg-list								Arg-list	Arg-list	Arg-list								ε					
Arg-list				Expression #get_arg Arg-list-prime			Expression #get_arg Arg-list-prime								Expression #get_arg Arg-list-prime	Expression #get_arg Arg-list-prime	Expression #get_arg Arg-list-prime								synch					
Arg-list-prime								, Expression #get_arg Arg-list-prime																	ε					
